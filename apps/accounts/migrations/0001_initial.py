# Generated by Django 4.2.5 on 2023-09-13 04:42

import apps.accounts.managers
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import encrypted_model_fields.fields


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                (
                    'is_superuser',
                    models.BooleanField(
                        default=False,
                        help_text='Designates that this user has all permissions without explicitly assigning them.',
                        verbose_name='superuser status',
                    ),
                ),
                (
                    'is_staff',
                    models.BooleanField(
                        default=False,
                        help_text='Designates whether the user can log into this admin site.',
                        verbose_name='staff status',
                    ),
                ),
                (
                    'is_active',
                    models.BooleanField(
                        default=True,
                        help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.',
                        verbose_name='active',
                    ),
                ),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('last_name', models.CharField(max_length=150, verbose_name='last name')),
                ('first_name', models.CharField(max_length=150, verbose_name='first name')),
                (
                    'groups',
                    models.ManyToManyField(
                        blank=True,
                        help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
                        related_name='user_set',
                        related_query_name='user',
                        to='auth.group',
                        verbose_name='groups',
                    ),
                ),
                (
                    'user_permissions',
                    models.ManyToManyField(
                        blank=True,
                        help_text='Specific permissions for this user.',
                        related_name='user_set',
                        related_query_name='user',
                        to='auth.permission',
                        verbose_name='user permissions',
                    ),
                ),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', apps.accounts.managers.AccountManager()),
            ],
        ),
        migrations.CreateModel(
            name='Wallet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, verbose_name='updated at')),
                (
                    'balance',
                    models.DecimalField(
                        decimal_places=2, default=Decimal('0.00'), max_digits=20, verbose_name='balance'
                    ),
                ),
                (
                    'currency',
                    models.CharField(
                        choices=[('NGN', 'Naira'), ('USD', 'Dollar')], max_length=3, verbose_name='currency'
                    ),
                ),
                (
                    'bank_name',
                    models.CharField(blank=True, max_length=250, null=True, verbose_name='deposit bank name'),
                ),
                (
                    'account_name',
                    models.CharField(blank=True, max_length=250, null=True, verbose_name='deposit account name'),
                ),
                (
                    'account_number',
                    models.CharField(blank=True, max_length=100, null=True, verbose_name='deposit account number'),
                ),
                (
                    'anchor_deposit_account_id',
                    models.CharField(max_length=150, unique=True, verbose_name='anchor deposit account id'),
                ),
                ('is_locked', models.BooleanField(default=False, verbose_name='is locked')),
                ('is_locked_reason', models.TextField(blank=True, null=True, verbose_name='is locked reason')),
                (
                    'account',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='wallets',
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, verbose_name='updated at')),
                (
                    'address',
                    encrypted_model_fields.fields.EncryptedTextField(blank=True, null=True, verbose_name='address'),
                ),
                ('city', encrypted_model_fields.fields.EncryptedCharField(blank=True, null=True, verbose_name='city')),
                (
                    'postal_code',
                    encrypted_model_fields.fields.EncryptedCharField(
                        blank=True, null=True, verbose_name='postal code'
                    ),
                ),
                (
                    'state',
                    encrypted_model_fields.fields.EncryptedCharField(
                        blank=True,
                        choices=[
                            ('FCT', 'Fct'),
                            ('OYO', 'Oyo'),
                            ('IMO', 'Imo'),
                            ('EDO', 'Edo'),
                            ('KANO', 'Kano'),
                            ('ONDO', 'Ondo'),
                            ('OSUN', 'Osun'),
                            ('OGUN', 'Ogun'),
                            ('KOGI', 'Kogi'),
                            ('YOBE', 'Yobe'),
                            ('ABIA', 'Abia'),
                            ('ENUGU', 'Enugu'),
                            ('LAGOS', 'Lagos'),
                            ('NIGER', 'Niger'),
                            ('BENUE', 'Benue'),
                            ('GOMBE', 'Gombe'),
                            ('KWARA', 'Kwara'),
                            ('EKITI', 'Ekiti'),
                            ('DELTA', 'Delta'),
                            ('BORNO', 'Borno'),
                            ('KEBBI', 'Kebbi'),
                            ('KADUNA', 'Kaduna'),
                            ('BAUCHI', 'Bauchi'),
                            ('EBONYI', 'Ebonyi'),
                            ('JIGAWA', 'Jigawa'),
                            ('SOKOTO', 'Sokoto'),
                            ('RIVERS', 'Rivers'),
                            ('TARABA', 'Taraba'),
                            ('ZAMFARA', 'Zamfara'),
                            ('PLATEAU', 'Plateau'),
                            ('ADAMAWA', 'Adamawa'),
                            ('ANAMBRA', 'Anambra'),
                            ('KATSINA', 'Katsina'),
                            ('BAYELSA', 'Bayelsa'),
                            ('NASARAWA', 'Nasarawa'),
                            ('AKWA_IBOM', 'Akwa Ibom'),
                            ('CROSS_RIVER', 'Cross River'),
                        ],
                        null=True,
                        verbose_name='state',
                    ),
                ),
                (
                    'country',
                    models.CharField(choices=[('NG', 'Nigeria')], default='NG', max_length=10, verbose_name='country'),
                ),
                (
                    'phone_number',
                    encrypted_model_fields.fields.EncryptedCharField(
                        blank=True, null=True, unique=True, verbose_name='phone number'
                    ),
                ),
                (
                    'date_of_birth',
                    encrypted_model_fields.fields.EncryptedDateField(
                        blank=True, null=True, verbose_name='date of birth'
                    ),
                ),
                (
                    'bvn',
                    encrypted_model_fields.fields.EncryptedCharField(
                        blank=True, null=True, verbose_name='bank verification number'
                    ),
                ),
                (
                    'gender',
                    models.CharField(
                        blank=True,
                        choices=[('Male', 'Male'), ('Female', 'Female'), ('Others', 'Others')],
                        max_length=20,
                        null=True,
                        verbose_name='gender',
                    ),
                ),
                (
                    'document_identifier',
                    encrypted_model_fields.fields.EncryptedCharField(
                        blank=True, null=True, verbose_name='document identifier'
                    ),
                ),
                (
                    'document_expiry_date',
                    encrypted_model_fields.fields.EncryptedDateField(
                        blank=True, null=True, verbose_name='document expiry date'
                    ),
                ),
                (
                    'document_type',
                    encrypted_model_fields.fields.EncryptedCharField(
                        blank=True,
                        choices=[
                            ('NIN_SLIP', 'Nin Slip'),
                            ('PASSPORT', 'Passport'),
                            ('VOTERS_CARD', 'Voters Card'),
                            ('NATIONAL_ID', 'National Id'),
                            ('DRIVERS_LICENSE', 'Drivers License'),
                        ],
                        null=True,
                        verbose_name='document type',
                    ),
                ),
                (
                    'kyc_level',
                    models.CharField(
                        choices=[('TIER_1', 'Tier 1'), ('TIER_2', 'Tier 2'), ('TIER_3', 'Tier 3')],
                        default='TIER_1',
                        max_length=6,
                        verbose_name='kyc level',
                    ),
                ),
                (
                    'anchor_customer_id',
                    models.CharField(
                        blank=True, max_length=150, null=True, unique=True, verbose_name='anchor customer id'
                    ),
                ),
                (
                    'account',
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='profile',
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddConstraint(
            model_name='wallet',
            constraint=models.UniqueConstraint(
                fields=('account', 'currency'), name='unique_wallet_per_user_and_currency'
            ),
        ),
    ]
